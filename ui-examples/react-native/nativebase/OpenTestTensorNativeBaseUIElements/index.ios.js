/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */
var RNFS = require('react-native-fs');
var UIManager = require('NativeModules').UIManager;
import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  View
} from 'react-native';
import {
  Container, Header, Title,
  Content, Footer, FooterTab, Button, Left, Right, Body, Icon, Text
} from 'native-base';


export default class OpenTestTensorNativeBaseUIElements extends Component {
  constructor(props) {
    super(props);
    this.state = {
      index: 0,
      component: null
    };
  }
  getComponentDims(component) {
    return new Promise(resolve => {
      component.measure((fx, fy, width, height, px, py) => {
        console.log('Component width is: ' + width)
        console.log('Component height is: ' + height)
        console.log('X offset to frame: ' + fx)
        console.log('Y offset to frame: ' + fy)
        console.log('X offset to page: ' + px)
        console.log('Y offset to page: ' + py)
        return { fx, fy, width, height, px, py };
      });
    });
  }
  componentDidMount() {
    var me = this;

  }
  render() {
    var me = this;
    var filepath = RNFS.MainBundlePath + '/open-test-tensor-current.json';
    var element = [];
    element.push((<Button
      onPress={() => {
        me.setState({ index: (me.state.index + 1) });

      }} style={{ width: 100 + me.state.index }}><Text>Text</Text></Button>));

    return (
      <Container>

        <View style={{
          flex: 1,
          alignItems: 'center',
          justifyContent: 'center',
        }}>
          <View style={{
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column'
          }}>
            <View ref="component"
              onLayout={(_evt) => {
                var evt = Object.assign({}, _evt.nativeEvent.layout);
                me.refs.component.measure((frameX, frameY, frameWidth, frameHeight, pageX, pageY) => {
                  Promise.resolve().then(() => {
                    return RNFS.exists(filepath).then(exists => {
                      if (exists) {
                        return RNFS.unlink(filepath).catch(e => {
                          console.log(e);
                        });
                      }
                    })
                  }).then(() => {
                    RNFS.writeFile(filepath, JSON.stringify({frameX, frameY, frameWidth, frameHeight, pageX, pageY}), 'utf8')
                      .then((success) => {
                        console.log('FILE WRITTEN!');
                        console.log(filepath);
                      })
                      .catch((err) => {
                        console.log(err.message);
                      });
                  });
                });
              }} >
              {element[0]}
            </View>
          </View>
        </View>
      </Container>
    );
  }
}

const styles = ({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('OpenTestTensorNativeBaseUIElements', () => OpenTestTensorNativeBaseUIElements);
