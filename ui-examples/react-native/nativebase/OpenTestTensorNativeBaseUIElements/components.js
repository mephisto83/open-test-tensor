/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */
var RNFS = require('react-native-fs');
var UIManager = require('NativeModules').UIManager;
import React, { Component } from 'react';
import lorem from './loremipsum';
import IonIcons from './ionicons';
import {
    AppRegistry,
    StyleSheet,
    View,
    Dimensions,
    TouchableOpacity
} from 'react-native';
import {
    Container, Header, Title,
    Item,
    Picker,
    List, ListItem,
    Input,
    Tabs, Tab,
    Segment,
    CheckBox,
    Spinner,
    Form,
    Label,
    Radio,
    Card, CardItem, Badge,
    Content, Footer, FooterTab, Button, Left, Right, Body, Icon, Text
} from 'native-base';


const { width, height } = Dimensions.get('window');

const icons = [];
for (var i in IonIcons) {
    icons.push(i);
}
const Colors = {

    LaborerText: '#ffffff',
    Customer: '#FFCA3A',

    Heroer: '#1982C4',
    Color5: '#FF595E',
    Start: '#8AC926',
    End: '#FF595E',
    White: '#ffffff',
    Grey: '#aaaaaa',
    BorderColor: '#aaaaaa33',
    Moving: '#1982C4',

    Success: '#9BC53D',
    Warning: '#FDE74C',

    Dark: '#404E4D',
    LighterDark: '#8C9494',
    HeroBlue: '#1452A7',
    PlaceHolderText: '#F2F2F2',
    ShadowColor: '#A8A8A8',
    Active: '#448AC926'
};
const colors = [];
for (var i in Colors) {
    colors.push(Colors[i])
}
function getLorem(min, max, nospacees) {
    min = min || 3;
    max = max || 240;
    var men = max - min;
    if (nospacees)
        return lorem.split('').filter(x => x !== ' ').join('').substr(Math.floor(Math.random() * lorem.length), Math.floor(Math.random() * men) + min)
    return lorem.substr(Math.floor(Math.random() * lorem.length), Math.floor(Math.random() * men) + min)
}
var type_ = '';
export default class Components extends Component {
    constructor(props) {
        super(props);
        this.state = {
            index: 0,
            component: null,
            type: 'button',
            typeIndex: 0
        };
    }
    getComponentDims(component) {
        return new Promise(resolve => {
            component.measure((fx, fy, width, height, px, py) => {
                console.log('Component width is: ' + width)
                console.log('Component height is: ' + height)
                console.log('X offset to frame: ' + fx)
                console.log('Y offset to frame: ' + fy)
                console.log('X offset to page: ' + px)
                console.log('Y offset to page: ' + py)
                return { fx, fy, width, height, px, py };
            });
        });
    }
    componentDidMount() {
        var me = this;

    }
    onValueChange(value) {
        this.setState({
            selected1: value
        });
    }
    getInputAttributes(props) {
        var options = [{ fixedLabel: true }, { inlineLabel: true },
        { inlineLabel: true, last: true },
        { floatingLabel: true }, { floatingLabel: true, last: true },
        { stackedLabel: true }, { stackedLabel: true, last: true },
        { regular: true }, {}, { rounded: true }, { success: true },
        { error: true }, { disabled: true }];
        var random = Math.floor(Math.random() * options.length);
        props.input = Object.assign(props.input, options[random]);
        return options[random];
    }
    render() {
        var me = this;
        var filepath = RNFS.MainBundlePath + '/open-test-tensor-current.json';
        var element = [];

        var length = Math.floor(Math.random() * 20) + 3;
        var word = getLorem(3, 18)


        var maxindex = 17;
        var typeIndex = 16;// Math.floor(Math.random() * maxindex)
        var randomicon = Math.floor(Math.random() * icons.length);
        var randomcolor = Math.floor(Math.random() * colors.length);
        var rcolor = colors[randomcolor];
        var rcolor2 = colors.filter(x => x !== rcolor)[Math.floor(Math.random() * (colors.length - 1))]
        var color_style = { color: rcolor2 };
        var view_color_style = { backgroundColor: Math.random() > .5 ? Colors.White : Colors.White };

        var additionalProps = {};
        var elementout = false;
        switch (typeIndex) {
            case 16:
            type_ = 'radio-list-item';
            additionalProps = { [type_]: [] };
            var text = getLorem(3, 15);
            var selected = Math.random() > .5 ? true : false;
            additionalProps[type_] = ({ selected, text })
            element.push((<ListItem>
                            <Text>{text}</Text>
                            <Right>
                                <Radio selected={selected} />
                            </Right>
                        </ListItem>
                        )); 
            break;
            case 15:
                type_ = 'footer';
                var count = Math.floor(Math.random() * 3) + 1;
                var initial = Math.floor(Math.random() * tabCount);
                // elementout = true;
                additionalProps = { buttons: { count, initial, labels: [], icons: [] } };
                element.push((<Footer>
                    <FooterTab>
                        {getLorem(count, count).split('').map((e, i) => {
                            var label = getLorem(3, 12);
                            randomicon = Math.floor(Math.random() * icons.length);
                            var ri = icons[randomicon]
                            additionalProps.buttons.labels.push(label);
                            additionalProps.buttons.icons.push(ri);
                            rcolor2 = colors.filter(x => x !== rcolor)[Math.floor(Math.random() * (colors.length - 1))]
                            color_style = { color: rcolor2 };
                            return (<Button transparent key={'tab' + i}>
                                <Icon name={ri} />
                                <Text>{label}</Text>
                            </Button>);
                        })}
                    </FooterTab>
                </Footer>));
                break;
            case 14:
                type_ = 'input';
                // elementout = true;
                var label = getLorem(3, 12, true);
                var inputtext = getLorem(3, 40);
                additionalProps = { input: { label, text: inputtext } };
                var attrs = me.getInputAttributes(additionalProps);
                var icon = null;
                // var iconffront = Math.random()>.5;
                if (additionalProps.input.error || additionalProps.input.success) {
                    randomicon = Math.floor(Math.random() * icons.length);
                    var ri = icons[randomicon]
                    icon = <Icon name={ri} />
                }
                element.push((<Form>
                    <Item {...attrs}>
                        {icon || (<Label>{label}</Label>)}
                        <Input value={inputtext} />
                    </Item>
                </Form>));
                break;
            case 13:
                type_ = 'tabs';
                var tabCount = Math.floor(Math.random() * 3) + 2;
                var initial = Math.floor(Math.random() * tabCount);
                additionalProps = { tabs: { tabCount, initial, labels: [] } };
                element.push((<Tabs initialPage={initial}>
                    {getLorem(tabCount, tabCount).split('').map((e, i) => {
                        var ht = getLorem(3, 6);
                        additionalProps.tabs.labels.push(ht);
                        return (<Tab key={'tab' + i} heading={ht}>
                            <View />
                        </Tab>);
                    })}
                </Tabs>
                ));
                break;
            case 12:
                type_ = 'spinner';
                elementout = true;
                element.push((<Spinner />))
                break;
            case 11:
                type_ = 'segment';
                elementout = true;
                var count = Math.floor(Math.random() * 1) + 2;
                var initial = Math.floor(Math.random() * count);
                additionalProps = { segments: { count, initial, labels: [] } };
                var ites = getLorem(count, count).split('');
                var active = Math.floor(Math.random() * ites.length);
                element.push((<Segment>
                    {ites.map((e, i) => {
                        var label = getLorem(3, 12);
                        additionalProps.segments.labels.push(label);
                        var attrs = {};
                        if (i === 0) {
                            attrs['first'] = true;
                        }
                        else if (i === ites.length - 1) {
                            attrs['last'] = true;
                        }
                        if (i === active) {
                            attrs['active'] = true;
                        }
                        return (<Button key={'segment' + i} {...attrs} ><Text>{label}</Text></Button>)
                    })
                    }
                </Segment>))
                break;
            case 10:
                type_ = 'search-bar';
                var placeholder = getLorem(2, 14);
                var btntext = (getLorem(2, 7));
                additionalProps = { placeholder, btntext };
                element.push((<Header searchBar rounded>
                    <Item>
                        <Icon name="ios-search" />
                        <Input placeholder={placeholder} />
                        <Icon name="ios-people" />
                    </Item>
                    <Button transparent>
                        <Text>{btntext}</Text>
                    </Button>
                </Header>))
                break;
            case 9:
                type_ = 'radio-list';
                additionalProps = { [type_]: [] };
                element.push((<List>
                    {
                        getLorem(1, 7).split('').map((t, i) => {
                            var text = getLorem(3, 15);
                            var selected = Math.random() > .5 ? true : false;
                            additionalProps[type_].push({ selected, text })
                            return (<ListItem key={'list_' + t + '' + i}>
                                <Text>{text}</Text>
                                <Right>
                                    <Radio selected={selected} />
                                </Right>
                            </ListItem>)
                        })
                    }
                </List>));
                break;
            case 8:
                type_ = 'list';
                additionalProps = { [type_]: [] };
                element.push((<List>
                    {
                        getLorem(1, 10).split('').map((t, i) => {
                            var text = getLorem(1, 40);
                            additionalProps[type_].push(text);
                            return (<ListItem key={'list_' + t + '' + i}>
                                <Text>{text}</Text>
                            </ListItem>)
                        })
                    }
                </List>));
                break;
            case 7:
                type_ = 'header';
                var label = getLorem(1, 15);
                additionalProps = { [type_]: { label } };
                element.push((<Header>
                    {Math.random() > .5 ? (<Left>
                        <Button transparent>
                            <Icon name='arrow-back' />
                        </Button>
                    </Left>) : null}
                    <Body>
                        <Title>{label}</Title>
                    </Body>
                    {Math.random() > .5 ? <Right>
                        <Button transparent>
                            <Icon name='menu' />
                        </Button>
                    </Right> : null}
                </Header>));
                break;
            case 6:
                type_ = 'checkbox';
                var label = getLorem(1, 21);
                //elementout = true;
                additionalProps = { [type_]: { label } };
                if (Math.random() > .5)
                    element.push((<ListItem>
                        <CheckBox checked={true} />
                        <Body>
                            <Text>{label}</Text>
                        </Body>
                    </ListItem>))
                else
                    element.push((<ListItem>
                        <CheckBox checked={false} />
                        <Body>
                            <Text>{label}</Text>
                        </Body>
                    </ListItem>))
                break;
            case 5:
                type_ = 'carditem';
                element.push((
                    <CardItem>
                        <Body>
                            <Text>{getLorem(30)}</Text>
                        </Body>
                    </CardItem>))
                break;
            case 4:
                type_ = 'card';
                element.push((
                    <Card>
                        <CardItem>
                            <Body>
                                <Text>{getLorem(3, 312)}</Text>
                            </Body>
                        </CardItem>
                    </Card>))
                break;
            case 3:
                type_ = 'badge';
                elementout = true;
                element.push((<Badge primary>
                    <Text>{Math.floor(Math.random() * 10)}</Text>
                </Badge>));
                break;
            case 2:
                type_ = 'picker';
                element.push((
                    <Picker
                        iosHeader="Select one"
                        mode="dropdown"
                        selectedValue={"key0"}
                        onValueChange={this.onValueChange.bind(this)}>
                        <Picker.Item label={word} value="key0" />
                        <Picker.Item label="ATM Card" value="key1" />
                    </Picker>));
                break;
            case 1:
                type_ = 'icon';
                elementout = true;
                element.push((<View style={{ alignItems: 'center' }}><Icon style={Object.assign({}, color_style)} name={icons[randomicon]} /></View>));
                break;
            default:
                type_ = 'button';
                elementout = true;
                element.push((<Button><Text>{word}</Text></Button>));
                break;
        }
        var contentview = (
            <View style={Object.assign({}, !elementout ? {} : {
                position: 'absolute',
                top: 200,
                alignItems: 'center',
                // backgroundColor:'red',
                left: 30
            })}
                ref="component"
                onLayout={() => {
                }} >
                {element[0]}
            </View>
        )

        return (
            <Container>
                <Button
                    style={{ margin: 10 }}
                    onPress={() => {
                        me.setState({ index: (me.state.index + 1), type: type_ });
                        setTimeout(() => {
                            me.refs.component.measure((frameX, frameY, frameWidth, frameHeight, pageX, pageY) => {
                                Promise.resolve().then(() => {
                                    return RNFS.exists(filepath).then(exists => {
                                        if (exists) {
                                            return RNFS.unlink(filepath).catch(e => {
                                                console.log(e);
                                            });
                                        }
                                    })
                                }).then(() => {
                                    return RNFS.writeFile(filepath, JSON.stringify(Object.assign({}, { additionalProps }, {
                                        frameX,
                                        frameY,
                                        frameWidth,
                                        frameHeight,
                                        pageX,
                                        pageY,
                                        type: type_
                                    })), 'utf8').then((success) => {
                                        console.log('FILE WRITTEN!');
                                        console.log(filepath);
                                    }).catch((err) => {
                                        console.log(err.message);
                                    });
                                });
                            });
                        }, 100)

                    }} color={rcolor2} ><Text>Next</Text></Button>

                {elementout ? contentview : null}
                <Content style={{ margin: (Math.random() * 4) + 2 }}>
                    {!elementout ? contentview : null}
                </Content>
            </Container>
        );
    }
}

const styles = ({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    welcome: {
        fontSize: 20,
        textAlign: 'center',
        margin: 10,
    },
    instructions: {
        textAlign: 'center',
        color: '#333333',
        marginBottom: 5,
    },
});